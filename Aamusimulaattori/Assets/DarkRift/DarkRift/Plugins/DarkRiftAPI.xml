<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DarkRiftAPI</name>
    </assembly>
    <members>
        <member name="F:DarkRift.DarkRiftAPI.connection">
            <summary>
                The connection used by DarkRiftAPI.
            </summary>
        </member>
        <member name="F:DarkRift.DarkRiftAPI.areEventsRedirected">
            <summary>
                Indicates whether events have beon redirected to the API yet.
            </summary>
        </member>
        <member name="M:DarkRift.DarkRiftAPI.ConnectInBackground(System.String)">
            <summary>
            	Connect to the specified IP in the background.
            </summary>
            <param name="ip">The target IP.</param>
            <remarks>
            	Defaults to port 4296.
            </remarks>
        </member>
        <member name="M:DarkRift.DarkRiftAPI.ConnectInBackground(System.String,System.Int32)">
            <summary>
            	Connect to the specified IP through the specified port in the background.
            </summary>
            <param name="ip">The target IP.</param>
            <param name="port">The port to use.</param>
        </member>
        <member name="M:DarkRift.DarkRiftAPI.Connect(System.String)">
            <summary>
            	Connect to the specified IP.
            </summary>
            <returns><c>true</c> if connected; otherwise, <c>false</c>.</returns>
            <param name="ip">The target IP.</param>
            <remarks>
            	Defaults to port 4296.
            </remarks>
        </member>
        <member name="M:DarkRift.DarkRiftAPI.Connect(System.String,System.Int32)">
            <summary>
            	Connect to the specified IP through the specified port.
            </summary>
            <returns><c>true</c> if connected; otherwise, <c>false</c>.</returns>
            <param name="ip">The target IP.</param>
            <param name="port">The port to use.</param>
        </member>
        <member name="M:DarkRift.DarkRiftAPI.Recieve">
            <summary>
                Receives data for those who can't spell "Receive". Like me...
            </summary>
        </member>
        <member name="M:DarkRift.DarkRiftAPI.Receive">
            <summary>
            	Receives all data from the server and sends it out.
            </summary>
        </member>
        <member name="M:DarkRift.DarkRiftAPI.SendMessageToServer(System.Byte,System.UInt16,System.Object)">
            <summary>
            	Sends data, tag and subject to the server.
            </summary>
            <param name="tag">The tag.</param>
            <param name="subject">The subject.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:DarkRift.DarkRiftAPI.SendMessageToID(System.UInt16,System.Byte,System.UInt16,System.Object)">
            <summary>
            	Sends data, tag and subject to a specific ID.
            </summary>
            <param name="tag">The tag.</param>
            <param name="subject">The subject.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:DarkRift.DarkRiftAPI.SendMessageToAll(System.Byte,System.UInt16,System.Object)">
            <summary>
            	Sends data, tag and subject to all clients and the server.
            </summary>
            <param name="tag">The tag.</param>
            <param name="subject">The subject.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:DarkRift.DarkRiftAPI.SendMessageToOthers(System.Byte,System.UInt16,System.Object)">
            <summary>
            	Sends data, tag and subject to all other clients.
            </summary>
            <param name="tag">The tag.</param>
            <param name="subject">The subject.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:DarkRift.DarkRiftAPI.SendMessage(DarkRift.DistributionType,System.Byte,System.UInt16,System.Object,System.UInt16)">
            <summary>
                Sends a message to clients/server.
            </summary>
            <param name="distributionType">How to distribute the data.</param>
            <param name="tag">The tag.</param>
            <param name="subject">The subjects.</param>
            <param name="data">The data.</param>
            <param name="id">The ID to send to if using DistributionType.ID.</param>
        </member>
        <member name="M:DarkRift.DarkRiftAPI.SendMessage(System.Byte,System.Byte,System.UInt16,System.Object,System.UInt16)">
            <summary>
                Sends a message to clients/server.
            </summary>
            <param name="distributionMode">The custom distribution mode code to send with.</param>
            <param name="tag">The tag.</param>
            <param name="subject">The subjects.</param>
            <param name="data">The data.</param>
            <param name="destinationID">The ID to send to if using DistributionType.ID.</param>
        </member>
        <member name="M:DarkRift.DarkRiftAPI.Disconnect">
            <summary>
            	Disconnect from the server.
            </summary>
        </member>
        <member name="M:DarkRift.DarkRiftAPI.RedirectConnectionEvents">
            <summary>
                Sets up the redirection of events from the Connection to the API.
            </summary>
        </member>
        <member name="P:DarkRift.DarkRiftAPI.id">
            <summary>
            	This is the id of the client as assigned by the server.
            </summary>
        </member>
        <member name="P:DarkRift.DarkRiftAPI.isConnected">
            <summary>
            	Are we connected to a server?
            </summary>
            <value><c>true</c> if connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DarkRift.DarkRiftAPI.workInBackground">
            <summary>
                Should threading be used to send/receive messages?
            </summary>
            <remarks>On occasion this may mean data does not transmit in the order you specify!</remarks>
        </member>
        <member name="E:DarkRift.DarkRiftAPI.onData">
            <summary>
            	Occurs when data is received but only gives tag, subject and data.
            </summary>
        </member>
        <member name="E:DarkRift.DarkRiftAPI.onDataDetailed">
            <summary>
            	Occurs when data is received but also passes the sender ID.
            </summary>
        </member>
        <member name="E:DarkRift.DarkRiftAPI.onPlayerDisconnected">
            <summary>
            	Occurs when a player has disconnected.
            </summary>
        </member>
        <member name="M:DarkRift.DarkRiftConnection.ConnectInBackground(System.String)">
            <summary>
            	Connect to the specified IP in the background.
            </summary>
            <param name="ip">The target IP.</param>
            <remarks>
            	Defaults to port 4296.
            </remarks>
        </member>
        <member name="M:DarkRift.DarkRiftConnection.ConnectInBackground(System.String,System.Int32)">
            <summary>
            	Connect to the specified IP through the specified port in the background.
            </summary>
            <param name="ip">The target IP.</param>
            <param name="port">The port to use.</param>
        </member>
        <member name="M:DarkRift.DarkRiftConnection.Connect(System.String)">
            <summary>
            	Connect to the specified IP.
            </summary>
            <returns><c>true</c> if connected; otherwise, <c>false</c>.</returns>
            <param name="ip">The target IP.</param>
            <remarks>
            	Defaults to port 4296.
            </remarks>
        </member>
        <member name="M:DarkRift.DarkRiftConnection.Connect(System.String,System.Int32)">
            <summary>
            	Connect to the specified IP through the specified port.
            </summary>
            <returns><c>true</c> if connected; otherwise, <c>false</c>.</returns>
            <param name="ip">The target IP.</param>
            <param name="port">The port to use.</param>
        </member>
        <member name="M:DarkRift.DarkRiftConnection.StartWaitingForBytes(System.Int32,System.Action{System.Byte[]})">
            <summary>
                Waits for the specified amount of bytes to be received.
            </summary>
            <param name="length">The number of bytes to receive.</param>
            <param name="callback">The callback </param>
        </member>
        <member name="M:DarkRift.DarkRiftConnection.StartWaitingForChunk(DarkRift.StateObject)">
            <summary>
                Waits for the next chunk of data from this socket.
            </summary>
            <param name="state">The StateObject for the receive operation.</param>
        </member>
        <member name="M:DarkRift.DarkRiftConnection.ChunkReadCallback(System.IAsyncResult)">
            <summary>
                Called when a chunk has been read.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:DarkRift.DarkRiftConnection.ReadHeaderCallback(System.Byte[])">
            <summary>
                Callback to read the header bytes from socket
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:DarkRift.DarkRiftConnection.ReadBodyCallback(System.Byte[])">
            <summary>
                Callback to read the body from the socket.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:DarkRift.DarkRiftConnection.Recieve">
            <summary>
                Receives data for those who can't spell "Receive". Like me...
            </summary>
        </member>
        <member name="M:DarkRift.DarkRiftConnection.Receive">
            <summary>
            	Receives all data from the server and sends it out.
            </summary>
        </member>
        <member name="M:DarkRift.DarkRiftConnection.ProcessMessage(DarkRift.NetworkMessage)">
            <summary>
                Processes a NetworkMessage.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:DarkRift.DarkRiftConnection.SendMessageToServer(System.Byte,System.UInt16,System.Object)">
            <summary>
            	Sends data, tag and subject to the server.
            </summary>
            <param name="tag">The tag.</param>
            <param name="subject">The subject.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:DarkRift.DarkRiftConnection.SendMessageToID(System.UInt16,System.Byte,System.UInt16,System.Object)">
            <summary>
            	Sends data, tag and subject to a specific ID.
            </summary>
            <param name="tag">The tag.</param>
            <param name="subject">The subject.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:DarkRift.DarkRiftConnection.SendMessageToAll(System.Byte,System.UInt16,System.Object)">
            <summary>
            	Sends data, tag and subject to all clients and the server.
            </summary>
            <param name="tag">The tag.</param>
            <param name="subject">The subject.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:DarkRift.DarkRiftConnection.SendMessageToOthers(System.Byte,System.UInt16,System.Object)">
            <summary>
            	Sends data, tag and subject to all other clients.
            </summary>
            <param name="tag">The tag.</param>
            <param name="subject">The subject.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:DarkRift.DarkRiftConnection.SendMessage(DarkRift.DistributionType,System.Byte,System.UInt16,System.Object,System.UInt16)">
            <summary>
                Sends a message to clients/server.
            </summary>
            <param name="distributionType">How to distribute the data.</param>
            <param name="tag">The tag.</param>
            <param name="subject">The subjects.</param>
            <param name="data">The data.</param>
            <param name="id">The ID to send to if using DistributionType.ID.</param>
        </member>
        <member name="M:DarkRift.DarkRiftConnection.SendMessage(System.Byte,System.Byte,System.UInt16,System.Object,System.UInt16)">
            <summary>
                Sends a message to clients/server.
            </summary>
            <param name="distributionMode">The custom distribution mode code to send with.</param>
            <param name="tag">The tag.</param>
            <param name="subject">The subjects.</param>
            <param name="data">The data.</param>
            <param name="destinationID">The ID to send to if using DistributionType.ID.</param>
        </member>
        <member name="M:DarkRift.DarkRiftConnection.ValidateNetworkMessage(DarkRift.NetworkMessage)">
            <summary>
            	Check if a network message breaches any rules.
            </summary>
            <returns><c>true</c>, if network message is valid, <c>false</c> otherwise.</returns>
            <param name="msg">The NetworkMessage to validate.</param>
        </member>
        <member name="M:DarkRift.DarkRiftConnection.ResolveUnityTypes(System.Object)">
            <summary>
            	Resolves the unity types to carriers to be serialized.
            </summary>
            <returns>A serialisable type.</returns>
            <param name="obj">The object to check.</param>
        </member>
        <member name="M:DarkRift.DarkRiftConnection.UnResolveUnityTypes(System.Object)">
            <summary>
            	Unresolve unity types from carriers.
            </summary>
            <returns>The resolve unity types.</returns>
            <param name="obj">The object.</param>
        </member>
        <member name="M:DarkRift.DarkRiftConnection.SendNetworkMessage(DarkRift.NetworkMessage)">
            <summary>
                Queue a message for sending or sends it immediately depending on settings.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:DarkRift.DarkRiftConnection.SendNetworkMessageNow(DarkRift.NetworkMessage)">
            <summary>
            	Encode and send a network message immediately.
            </summary>
            <param name="msg">The NetworkMessage.</param>
        </member>
        <member name="M:DarkRift.DarkRiftConnection.Disconnect">
            <summary>
            	Disconnect from the server.
            </summary>
        </member>
        <member name="M:DarkRift.DarkRiftConnection.Close(System.Boolean)">
            <summary>
                Closes this connection and can inform the server.
            </summary>
            <param name="inform"></param>
        </member>
        <member name="P:DarkRift.DarkRiftConnection.id">
            <summary>
            	This is the id of the client as assigned by the server.
            </summary>
        </member>
        <member name="P:DarkRift.DarkRiftConnection.isConnected">
            <summary>
            	Are we connected to a server?
            </summary>
            <value><c>true</c> if connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DarkRift.DarkRiftConnection.workInBackground">
            <summary>
                Should the threading be used to send/receive messages?
            </summary>
            <remarks>On occasion this may mean data does not transmit in the order you specify!</remarks>
        </member>
        <member name="E:DarkRift.DarkRiftConnection.onData">
            <summary>
            	Occurs when data is received but only gives tag, subject and data.
            </summary>
        </member>
        <member name="E:DarkRift.DarkRiftConnection.onDataDetailed">
            <summary>
            	Occurs when data is received but also passes the sender ID.
            </summary>
        </member>
        <member name="E:DarkRift.DarkRiftConnection.onPlayerDisconnected">
            <summary>
            	Occurs when a player has disconnected.
            </summary>
        </member>
        <member name="T:DarkRift.StateObject">
            <summary>
                Represents the state of the current receive operation for TCP connections.
            </summary>
        </member>
        <member name="F:DarkRift.StateObject.buffer">
            <summary>
                The buffer we're receiving.
            </summary>
        </member>
        <member name="F:DarkRift.StateObject.totalBytesReceived">
            <summary>
                The total number of bytes received so far.
            </summary>
        </member>
        <member name="F:DarkRift.StateObject.callback">
            <summary>
                The callback to invoke once the buffer has been filled.
            </summary>
        </member>
        <member name="M:DarkRift.StateObject.#ctor(System.Int32,System.Action{System.Byte[]})">
            <summary>
                Creates a StateObject with the specified length.
            </summary>
            <param name="length">The number of bytes expected to be received.</param>
            <param name="callback">The callback to invoke once data has been received.</param>
        </member>
    </members>
</doc>
